name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type checking
        run: bun run typecheck

      - name: Build site
        run: bun run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '20'
        with:
          name: build-files
          path: build/
          retention-days: 1

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check Prettier formatting
        run: |
          if command -v prettier &> /dev/null; then
            bunx prettier --check "**/*.{js,jsx,ts,tsx,md,json,yml,yaml}"
          else
            echo "Prettier not configured - skipping format check"
          fi

      - name: Run ESLint
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            bunx eslint . --ext .js,.jsx,.ts,.tsx
          else
            echo "ESLint not configured - skipping lint check"
          fi

  validate-content:
    name: Validate Content
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for broken links in markdown
        run: |
          # Simple check for obvious broken internal links
          echo "Checking for broken internal links..."
          if grep -r "](/" docs/ src/ blog/ 2>/dev/null | grep -E "\]\([^)]*\.(md|html)" | grep -v "^#"; then
            echo "Found potential internal broken links"
            exit 1
          else
            echo "No obvious broken internal links found"
          fi

      - name: Validate markdown syntax
        run: |
          echo "Validating markdown files..."
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./build/*" | while read file; do
            if ! bunx remark "$file" --no-stdout --quiet 2>/dev/null; then
              echo "Markdown syntax error in: $file"
              exit 1
            fi
          done || echo "No markdown linter available - skipping validation"

      - name: Check for DCO sign-off in commits
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking DCO sign-off..."
          commits=$(git log --format="%H %s" origin/main..HEAD)
          if [ -z "$commits" ]; then
            echo "No commits to check"
            exit 0
          fi
          
          echo "$commits" | while read commit subject; do
            if ! git show --format="%B" "$commit" | grep -q "Signed-off-by:"; then
              echo "❌ Commit $commit missing DCO sign-off: $subject"
              exit 1
            else
              echo "✅ Commit $commit has DCO sign-off: $subject"
            fi
          done

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Run security audit
        run: |
          echo "Running security audit..."
          if bun audit --help &>/dev/null; then
            bun audit
          else
            echo "Using npm audit as fallback..."
            npm audit --audit-level moderate
          fi


  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, lint-and-format, validate-content, security-audit]
    if: always()

    steps:
      - name: Check all job results
        run: |
          echo "## CI Pipeline Summary"
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Content Validation: ${{ needs.validate-content.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          
          if [[ "${{ needs.build-and-test.result }}" == "success" && 
                "${{ needs.lint-and-format.result }}" == "success" && 
                "${{ needs.validate-content.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi